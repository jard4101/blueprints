blueprint:
  name: Saisonale Rollladensteuerung (v4.9)
  description: |
    Automatische Steuerung mit erweiterten Testszenarien und generischer Fehlerresilienz.
  domain: automation
  source_url: https://raw.githubusercontent.com/jard4101/blueprints/main/Seasonal_Blinds_Control.yaml
  author: jard4101

  input:
    # [Alle Inputs wie zuvor]
    ...

mode: queued
max_exceeded: silent

variables:
  safe_sunrise: >-
    {% set rising = state_attr('sun.sun', 'next_rising') %}
    {{ as_local(rising) if rising else now().replace(hour=7) }}
  
  validated_dates: >-
    {% macro validate(date_str, default) -%}
      {% if date_str | regex_match('^(0[1-9]|1[0-9]|2[0-9]|3[0-1])-(0[1-9]|1[0-2])$') %}
        {{ date_str }}
      {% else %}
        {{ default }}
      {% endif %}
    {%- endmacro %}
    {
      "spring": "{{ validate(input.spring_start, '20-03') }}",
      "summer": "{{ validate(input.summer_start, '21-06') }}",
      "autumn": "{{ validate(input.autumn_start, '23-09') }}"
    }

  current_season: >-
    {% set now_utc = as_timestamp(utcnow()) %}
    {% set spring_ts = as_timestamp(strptime(validated_dates.spring ~ '-' ~ now().year, '%d-%m-%Y')) %}
    {% set summer_ts = as_timestamp(strptime(validated_dates.summer ~ '-' ~ now().year, '%d-%m-%Y')) %}
    {% set autumn_ts = as_timestamp(strptime(validated_dates.autumn ~ '-' ~ now().year, '%d-%m-%Y')) %}
    {% if now_utc >= spring_ts and now_utc < summer_ts %}spring
    {% elif now_utc >= summer_ts and now_utc < autumn_ts %}summer
    {% else %}winter{% endif %}

  target_open_time: >-
    {% set season_times = {
      'spring': input.spring_open_time,
      'summer': input.summer_open_time,
      'winter': input.winter_open_time
    } %}
    {{ [safe_sunrise.strftime('%H:%M'), season_times[current_season]] | max }}

  final_groups: >-
    {
      "group1": {{ input.group1_covers | default([]) | reject('in', input.group2_covers | default([])) }},
      "group2": {{ input.group2_covers | default([]) | reject('in', input.group1_covers | default([])) }}
    }

  group2_enabled: >-
    {{ not is_state(input.group2_disable_switch, 'on') 
       if input.group2_disable_switch 
       else true }}

triggers:
  - platform: time
    at: "{{ target_open_time }}"
  - platform: event
    event_type: homeassistant_started

action:
  - parallel:
      - service: cover.open_cover
        target: 
          entity_id: "{{ final_groups.group1 }}"
        enabled: "{{ final_groups.group1 | length > 0 }}"
      - service: cover.open_cover
        target: 
          entity_id: "{{ final_groups.group2 }}"
        enabled: "{{ (final_groups.group2 | length > 0) and group2_enabled }}"
      - service: system_log.write
        data:
          message: "Automatisierung erfolgreich: {{ now() }}"
        enabled: "{{ input.enable_logging }}"
