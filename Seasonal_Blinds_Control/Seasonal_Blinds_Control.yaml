blueprint:
  name: Saisonale Rollladensteuerung (v4.12)
  description: |
    Fehlerresistente Version mit Helper-Test-Trigger.
    Unterstützt manuelle Tests über input_button. Keine Trigger-Abhängigkeit in Variablen.
  domain: automation
  source_url: https://raw.githubusercontent.com/jard4101/blueprints/main/Seasonal_Blinds_Control.yaml
  author: jard4101

  input:
    group1_covers:
      name: Rollläden Gruppe 1
      selector:
        entity:
          domain: cover
          multiple: true
    group2_covers:
      name: Rollläden Gruppe 2
      description: "Nur aktiv wenn Deaktivierungsschalter aus"
      selector:
        entity:
          domain: cover
          multiple: true
    group2_disable_switch:
      name: Deaktivierungsschalter
      selector:
        entity:
          domain: input_boolean
    spring_start:
      name: Frühlingsbeginn (TT-MM)
      default: "20-03"
      selector:
        text: {}
    summer_start:
      name: Sommerbeginn (TT-MM)
      default: "21-06"
      selector:
        text: {}
    autumn_start:
      name: Herbstbeginn (TT-MM)
      default: "23-09"
      selector:
        text: {}
    winter_open_time:
      name: Winter-Öffnungszeit
      default: "07:00"
      selector:
        time: {}
    spring_open_time:
      name: Frühling-Öffnungszeit
      default: "06:30"
      selector:
        time: {}
    summer_open_time:
      name: Sommer-Öffnungszeit
      default: "06:00"
      selector:
        time: {}
    enable_logging:
      name: Logging aktivieren
      default: false
      selector:
        boolean: {}
    test_helper:
      name: Test-Trigger Button (input_button)
      description: "Wähle einen input_button für Testzwecke"
      selector:
        entity:
          domain: input_button

mode: parallel
max: 5
max_exceeded: silent

variables:
  safe_sunrise: >-
    {% set rising = state_attr('sun.sun', 'next_rising') %}
    {{ as_local(rising).replace(second=0) if rising else now().replace(hour=7, minute=0, second=0) }}
  validated_dates: >-
    {% macro validate(date_str, default) -%}
      {% if date_str | regex_match('^(0[1-9]|1[0-9]|2[0-9]|3[0-1])-(0[1-9]|1[0-2])$') %}
        {{ date_str }}
      {% else %}
        {{ default }}
      {% endif %}
    {%- endmacro %}
    {
      "spring": "{{ validate(input.spring_start, '20-03') }}",
      "summer": "{{ validate(input.summer_start, '21-06') }}",
      "autumn": "{{ validate(input.autumn_start, '23-09') }}"
    }
  current_season: >-
    {% set now_ts = as_timestamp(utcnow()) %}
    {% set spring_ts = as_timestamp(strptime(validated_dates.spring ~ '-' ~ now().year, '%d-%m-%Y')) %}
    {% set summer_ts = as_timestamp(strptime(validated_dates.summer ~ '-' ~ now().year, '%d-%m-%Y')) %}
    {% set autumn_ts = as_timestamp(strptime(validated_dates.autumn ~ '-' ~ now().year, '%d-%m-%Y')) %}
    {% if now_ts >= spring_ts and now_ts < summer_ts %}spring
    {% elif now_ts >= summer_ts and now_ts < autumn_ts %}summer
    {% else %}winter{% endif %}
  target_open_time: >-
    {% set season_times = {
      'spring': input.spring_open_time,
      'summer': input.summer_open_time,
      'winter': input.winter_open_time
    } %}
    {{ [safe_sunrise.strftime('%H:%M'), season_times[current_season]] | max }}
  final_groups: >-
    {
      "group1": {{ input.group1_covers | default([]) | reject('in', input.group2_covers | default([])) }},
      "group2": {{ input.group2_covers | default([]) | reject('in', input.group1_covers | default([])) }}
    }
  group2_enabled: >-
    {{ not is_state(input.group2_disable_switch, 'on') 
       if input.group2_disable_switch 
       else true }}

triggers:
  - platform: time
    at: "{{ target_open_time }}"
  - platform: state
    entity_id: sun.sun
    from: "below_horizon"
    to: "above_horizon"
  - platform: state
    entity_id: !input test_helper

action:
  - parallel:
      - service: cover.open_cover
        target:
          entity_id: "{{ final_groups.group1 }}"
        enabled: "{{ final_groups.group1 | length > 0 }}"
      - service: cover.open_cover
        target:
          entity_id: "{{ final_groups.group2 }}"
        enabled: "{{ (final_groups.group2 | length > 0) and group2_enabled }}"
      - service: system_log.write
        data:
          message: "Automation ausgelöst: {{ now().strftime('%d.%m.%Y %H:%M:%S') }}"
          level: info
        enabled: "{{ input.enable_logging }}"
