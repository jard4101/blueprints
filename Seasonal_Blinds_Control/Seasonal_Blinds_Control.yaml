blueprint:
  name: Saisonale Rollladensteuerung (v5.0)
  description: |
    Automatische Steuerung von Rollläden basierend auf Sonnenaufgang und Jahreszeiten.
    Berücksichtigt Zeitzonen, Sommerzeit und bietet robuste Fehlerbehandlung.
  domain: automation
  source_url: https://github.com/jard4101/friendly-octo-guide
  author: jard4101

  input:
    group1_covers:
      name: Rollläden Gruppe 1
      selector:
        entity:
          domain: cover
          multiple: true
    group2_covers:
      name: Rollläden Gruppe 2
      description: "Nur aktiv wenn Deaktivierungsschalter aus"
      default: []
      selector:
        entity:
          domain: cover
          multiple: true
    group2_disable_switch:
      name: Deaktivierungsschalter
      selector:
        entity:
          domain: input_boolean
    spring_start:
      name: Frühlingsbeginn (TT-MM)
      default: "20-03"
      selector:
        text: {}
    summer_start:
      name: Sommerbeginn (TT-MM)
      default: "21-06"
      selector:
        text: {}
    autumn_start:
      name: Herbstbeginn (TT-MM)
      default: "23-09"
      selector:
        text: {}
    winter_open_time:
      name: Winter-Öffnungszeit
      default: "07:00"
      selector:
        time: {}
    spring_open_time:
      name: Frühling-Öffnungszeit
      default: "06:30"
      selector:
        time: {}
    summer_open_time:
      name: Sommer-Öffnungszeit
      default: "06:00"
      selector:
        time: {}
    enable_logging:
      name: Logging aktivieren
      default: false
      selector:
        boolean: {}

variables:
  # Validierte Datumseingaben
  validated_dates: >-
    {% macro validate(date_str, default) %}
      {% set parts = date_str.split('-') %}
      {% if parts|count == 2 and parts[0]|int(0) > 0 and parts[0]|int(0) <= 31 
            and parts[1]|int(0) > 0 and parts[1]|int(0) <= 12 %}
        {{ date_str }}
      {% else %}
        {{ default }}
      {% endif %}
    {% endmacro %}
    {
      "spring": "{{ validate(input.spring_start, '20-03') }}",
      "summer": "{{ validate(input.summer_start, '21-06') }}",
      "autumn": "{{ validate(input.autumn_start, '23-09') }}"
    }

  # Jahreszeitenberechnung mit UTC
  current_season: >-
    {% set now_utc = utcnow().timestamp() %}
    {% set year = utcnow().year %}
    {% set dates = {
      'spring': strptime(validated_dates.spring ~ '-' ~ year, '%d-%m-%Y').timestamp(),
      'summer': strptime(validated_dates.summer ~ '-' ~ year, '%d-%m-%Y').timestamp(),
      'autumn': strptime(validated_dates.autumn ~ '-' ~ year, '%d-%m-%Y').timestamp(),
      'winter': strptime('21-12-' ~ year, '%d-%m-%Y').timestamp()
    } %}
    {% if now_utc < dates.spring %}winter
    {% elif now_utc < dates.summer %}spring
    {% elif now_utc < dates.autumn %}summer
    {% elif now_utc < dates.winter %}autumn
    {% else %}winter{% endif %}

  # Sonnenaufgang mit Fallback
  sunrise_time: >-
    {% set rising = state_attr('sun.sun', 'next_rising') %}
    {% if rising is none %}
      {{ utcnow().replace(hour=5, minute=0) }}
    {% else %}
      {{ as_local(rising) }}
    {% endif %}

  # Öffnungszeitberechnung
  target_open_time: >-
    {% set season_times = {
      'spring': input.spring_open_time,
      'summer': input.summer_open_time,
      'autumn': input.spring_open_time,
      'winter': input.winter_open_time
    } %}
    {% set conf_time = strptime(season_times[current_season], '%H:%M') %}
    {% set sunrise = sunrise_time.time() %}
    {{ [conf_time, sunrise]|max|string|regex_replace(':00$','') }}

  # Duplikatsprüfung (case-sensitive)
  duplicate_covers: >-
    {{ group1_covers|intersect(group2_covers)|list }}

trigger:
  - platform: time
    at: "{{ target_open_time }}"
  - platform: state
    entity_id: sun.sun
    from: "below_horizon"
    to: "above_horizon"

condition:
  - condition: or
    conditions:
      - "{{ now().strftime('%H:%M') == target_open_time }}"
      - "{{ is_state('sun.sun', 'above_horizon') and 
           (utcnow() - states.sun.sun.last_updated_utc).total_seconds() < 300 }}"

action:
  - parallel:
      - choose:
          - conditions: "{{ group1_covers|difference(duplicate_covers)|length > 0 }}"
            sequence:
              - service: cover.open_cover
                target:
                  entity_id: "{{ group1_covers|difference(duplicate_covers) }}"
        default: []
      
      - choose:
          - conditions: >-
              {{ group2_covers|difference(duplicate_covers)|length > 0 
              and is_state(input.group2_disable_switch, 'off') }}
            sequence:
              - service: cover.open_cover
                target:
                  entity_id: "{{ group2_covers|difference(duplicate_covers) }}"
        default: []
      
      - service: persistent_notification.create
        data:
          title: "Doppelte Rollläden"
          message: "Konflikte: {{ duplicate_covers|join(', ') }}"
        enabled: "{{ duplicate_covers|length > 0 }}"
      
      - service: system_log.write
        data:
          message: |
            Rolladensteuerung {{ now() }}:
            - Jahreszeit: {{ current_season }}
            - Öffnungszeit: {{ target_open_time }}
            - Gruppe1: {{ group1_covers|length }}
            - Gruppe2: {{ group2_covers|length }}
          level: info
        enabled: "{{ input.enable_logging }}"
