blueprint:
  name: Saisonale Rollladensteuerung (v4.5)
  description: |
    Automatische Steuerung von Rollläden basierend auf Sonnenaufgang und Jahreszeiten.
    Unterstützt zwei Gruppen mit Deaktivierungsschalter und robustem Fehlerhandling.
  domain: automation
  source_url: https://raw.githubusercontent.com/jard4101/blueprints/refs/heads/main/Seasonal_Blinds_Control/Seasonal_Blinds_Control.yaml
  author: jard4101
  last_modified: "2025-04-27"

  input:
    group1_covers:
      name: Rollläden Gruppe 1
      selector:
        entity:
          domain: cover
          multiple: true
    group2_covers:
      name: Rollläden Gruppe 2
      description: "Nur aktiv wenn Deaktivierungsschalter aus"
      selector:
        entity:
          domain: cover
          multiple: true
    group2_disable_switch:
      name: Deaktivierungsschalter
      selector:
        entity:
          domain: input_boolean
    spring_start:
      name: Frühlingsbeginn (TT-MM)
      default: "20-03"
      selector:
        text: {}
    summer_start:
      name: Sommerbeginn (TT-MM)
      default: "21-06"
      selector:
        text: {}
    autumn_start:
      name: Herbstbeginn (TT-MM)
      default: "23-09"
      selector:
        text: {}
    winter_open_time:
      name: Winter-Öffnungszeit
      default: "07:00"
      selector:
        time: {}
    spring_open_time:
      name: Frühling-Öffnungszeit
      default: "06:30"
      selector:
        time: {}
    summer_open_time:
      name: Sommer-Öffnungszeit
      default: "06:00"
      selector:
        time: {}
    enable_logging:
      name: Logging aktivieren
      default: false
      selector:
        boolean: {}

variables:
  # Validierte Datumseingaben (TT-MM)
  validated_dates: >-
    {% macro validate(date_str, default) -%}
      {% if date_str | regex_match('^(0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[0-2])$') 
         and date_str[0:2]|int <= 31 
         and date_str[3:5]|int <= 12 %}
        {{ date_str }}
      {% else %}
        {{ default }}
      {% endif %}
    {%- endmacro %}
    {
      "spring": "{{ validate(input.spring_start, '20-03') }}",
      "summer": "{{ validate(input.summer_start, '21-06') }}",
      "autumn": "{{ validate(input.autumn_start, '23-09') }}"
    }

  # Jahreszeitenlogik mit UTC-Handling
  current_season: >-
    {% set now_utc = utcnow() %}
    {% set spring_date = strptime(validated_dates.spring ~ '-' ~ now_utc.year, '%d-%m-%Y') %}
    {% set summer_date = strptime(validated_dates.summer ~ '-' ~ now_utc.year, '%d-%m-%Y') %}
    {% set autumn_date = strptime(validated_dates.autumn ~ '-' ~ now_utc.year, '%d-%m-%Y') %}
    
    {% if now_utc >= spring_date and now_utc < summer_date %}spring
    {% elif now_utc >= summer_date and now_utc < autumn_date %}summer
    {% else %}winter{% endif %}

  # Sonnenaufgang mit DST-Handling
  sunrise_time: >-
    {% set rising = state_attr('sun.sun', 'next_rising') %}
    {% if rising %}
      {{ as_local(rising).strftime('%H:%M') }}
    {% else %}
      07:00
    {% endif %}

  # Ziel-Öffnungszeit
  target_open_time: >-
    {% set season_config = {
      'spring': input.spring_open_time,
      'summer': input.summer_open_time,
      'winter': input.winter_open_time
    } %}
    {{ [sunrise_time, season_config[current_season]] | max }}

action:
  - parallel:
      - service: cover.open_cover
        target:
          entity_id: "{{ input.group1_covers | reject('in', input.group2_covers) }}"
        enabled: "{{ input.group1_covers | length > 0 }}"
      - service: cover.open_cover
        target:
          entity_id: "{{ input.group2_covers | reject('in', input.group1_covers) }}"
        enabled: >-
          {{ 
            input.group2_covers | length > 0 
            and is_state(input.group2_disable_switch, 'off')
            and input.group2_disable_switch not in ['', None]
          }}
      - service: system_log.write
        data:
          message: "{{ log_info }}"
          level: info
        enabled: "{{ input.enable_logging }}"
