blueprint:
  name: Saisonale Rollladensteuerung (v3.3)
  description: "Automatische Steuerung mit saisonalen Zeitplänen und Fehlerresilienz"
  domain: automation
  source_url: https://github.com/jard4101/friendly-octo-guide
  author: jard4101
  
  input:
    group1_covers:
      name: Rollläden Gruppe 1
      selector:
        entity:
          domain: cover
          multiple: true
    group2_covers:
      name: Rollläden Gruppe 2
      description: "Nur aktiv wenn Deaktivierungsschalter aus"
      default: []
      selector:
        entity:
          domain: cover
          multiple: true
    group2_disable_switch:
      name: Deaktivierungsschalter
      selector:
        entity:
          domain: input_boolean
    spring_start:
      name: Frühlingsbeginn
      default: "03-20"
      selector:
        text:
          pattern: "^(0[1-9]|1[0-9]|2[0-9]|3[0-1])-(0[1-9]|1[0-2])$"
    summer_start:
      name: Sommerbeginn
      default: "06-21"
      selector:
        text:
          pattern: "^(0[1-9]|1[0-9]|2[0-9]|3[0-1])-(0[1-9]|1[0-2])$"
    autumn_start:
      name: Herbstbeginn
      default: "09-23"
      selector:
        text:
          pattern: "^(0[1-9]|1[0-9]|2[0-9]|3[0-1])-(0[1-9]|1[0-2])$"
    winter_open_time:
      name: Winter-Öffnungszeit
      default: "07:00"
      selector:
        time: {}
    spring_open_time:
      name: Frühling-Öffnungszeit
      default: "06:30"
      selector:
        time: {}
    summer_open_time:
      name: Sommer-Öffnungszeit
      default: "06:00"
      selector:
        time: {}
    enable_logging:
      name: Logging aktivieren
      default: false
      selector:
        boolean: {}

mode: queued
max_exceeded: silent

variables:
  now: "{{ now().astimezone(now().tzinfo) }}"
  current_year: "{{ now.year }}"
  
  # Jahreszeitenberechnung
  season_dates: >-
    {% set parse_date = (lambda d: strptime(d ~ '-' ~ current_year, "%d-%m-%Y")) %}
    {
      "spring_start": {{ parse_date(input.spring_start).timestamp() }},
      "summer_start": {{ parse_date(input.summer_start).timestamp() }},
      "autumn_start": {{ parse_date(input.autumn_start).timestamp() }},
      "winter_start": {{ parse_date('21-12').timestamp() }}
    }
  
  current_season: >-
    {% set now_ts = as_timestamp(now) %}
    {% if now_ts >= season_dates.spring_start and now_ts < season_dates.summer_start %}spring
    {% elif now_ts >= season_dates.summer_start and now_ts < season_dates.autumn_start %}summer
    {% elif now_ts >= season_dates.autumn_start and now_ts < season_dates.winter_start %}autumn
    {% else %}winter{% endif %}
  
  # Sonnenaufgang mit Fallback
  sunrise: >-
    {% set rising = state_attr('sun.sun', 'next_rising') %}
    {{ rising.astimezone(now.tzinfo) if rising else now.replace(hour=7) }}

  # Öffnungszeitberechnung
  season_config: >-
    {
      "spring": {"time": "{{ input.spring_open_time }}", "limit": "06:30"},
      "summer": {"time": "{{ input.summer_open_time }}", "limit": "06:00"},
      "winter": {"time": "{{ input.winter_open_time }}", "limit": "07:00"}
    }
  
  target_open_time: >-
    {% set conf = season_config[current_season] %}
    {% set sunrise_time = sunrise.strftime('%H:%M') %}
    {% set config_time = strptime(conf.time, '%H:%M').strftime('%H:%M') %}
    {{ [sunrise_time, config_time] | max }}

trigger:
  - platform: time
    at: "{{ target_open_time }}"
  - platform: event
    event_type: homeassistant_started
  - platform: state
    entity_id: sun.sun
    from: "below_horizon"
    to: "above_horizon"

condition:
  - condition: template
    value_template: >-
      {% if trigger.platform == 'time' %}
        true
      {% else %}
        {{ (as_timestamp(now) - as_timestamp(states.sun.sun.last_changed)) < 60 }}
      {% endif %}

action:
  - parallel:
      - choose:
          - conditions: "{{ input.group1_covers | length > 0 }}"
            sequence:
              - service: cover.open_cover
                target: 
                  entity_id: "{{ input.group1_covers | reject('in', input.group2_covers) }}"
        default: []
      
      - choose:
          - conditions: >-
              {{ input.group2_covers | length > 0
                 and is_state(input.group2_disable_switch, 'off')
                 and input.group2_disable_switch not in ['', None] }}
            sequence:
              - service: cover.open_cover
                target: 
                  entity_id: "{{ input.group2_covers | reject('in', input.group1_covers) }}"
        default: []
      
      - choose:
          - conditions: "{{ input.enable_logging }}"
            sequence:
              - service: system_log.write
                data:
                  message: >-
                    [Rolladensteuerung] {{ now.strftime('%d.%m.%Y %H:%M') }}
                    - Jahreszeit: {{ current_season }}
                    - Sonnenaufgang: {{ sunrise.strftime('%H:%M') }}
                    - Öffnungszeit: {{ target_open_time }}
                    - Aktive Rollläden: 
                      Gruppe1: {{ (input.group1_covers | length) - (input.group1_covers | intersect(input.group2_covers) | length) }}
                      Gruppe2: {{ (input.group2_covers | length) - (input.group1_covers | intersect(input.group2_covers) | length) }}
                  level: info
