blueprint:
  name: Saisonale Rollladensteuerung (v3.1)
  description: "Korrigierte Version mit UTC-Zeitmanagement und Batch-Verarbeitung"
  domain: automation
  source_url: https://github.com/jard4101/friendly-octo-guide
  author: jard4101
  input:
    group1_covers:
      name: Rollläden Gruppe 1
      selector:
        entity:
          domain: cover
          multiple: true
    group2_covers:
      name: Rollläden Gruppe 2
      description: "Nur aktiv wenn Deaktivierungsschalter aus"
      default: []
      selector:
        entity:
          domain: cover
          multiple: true
    group2_disable_switch:
      name: Deaktivierungsschalter
      selector:
        entity:
          domain: input_boolean
    spring_start:
      name: Frühlingsbeginn
      default: "03-20"
      selector:
        date:
          mode: date
    summer_start:
      name: Sommerbeginn
      default: "06-21"
      selector:
        date:
          mode: date
    autumn_start:
      name: Herbstbeginn
      default: "09-23"
      selector:
        date:
          mode: date
    winter_open_time:
      name: Winter-Öffnungszeit
      default: "07:00"
      selector:
        time: {}
    spring_open_time:
      name: Frühling-Öffnungszeit
      default: "06:30"
      selector:
        time: {}
    summer_open_time:
      name: Sommer-Öffnungszeit
      default: "06:00"
      selector:
        time: {}
    enable_logging:
      name: Logging aktivieren
      default: false
      selector:
        boolean: {}

mode: queued
max_exceeded: silent

variables:
  # Zeitmanagement
  now_utc: "{{ utcnow() }}"
  now_local: "{{ now_utc.astimezone(now().tzinfo) }}"
  last_sunrise: "{{ state_attr('sun.sun', 'next_rising') or now_utc.replace(hour=7) }}"
  
  # Jahreszeitenberechnung
  season_bounds: >-
    {% set year = now_local.year %}
    {
      "spring": {{ as_timestamp(datetime(year, 3, 20)) }},
      "summer": {{ as_timestamp(datetime(year, 6, 21)) }},
      "autumn": {{ as_timestamp(datetime(year, 9, 23)) }},
      "winter": {{ as_timestamp(datetime(year, 12, 21)) }}
    }
  
  current_season: >-
    {% set ts = as_timestamp(now_utc) %}
    {% if ts < season_bounds.spring %}winter
    {% elif ts < season_bounds.summer %}spring
    {% elif ts < season_bounds.autumn %}summer
    {% elif ts < season_bounds.winter %}autumn
    {% else %}winter{% endif %}
  
  # Öffnungszeitberechnung
  season_config: >-
    {
      "spring": {
        "base_time": "{{ input.spring_open_time }}",
        "limit": "06:30"
      },
      "summer": {
        "base_time": "{{ input.summer_open_time }}",
        "limit": "06:00"
      },
      "winter": {
        "base_time": "{{ input.winter_open_time }}",
        "limit": "07:00"
      }
    }
  
  target_open_time: >-
    {% set sun_rising = as_local(last_sunrise).strftime('%H:%M') %}
    {% set conf = season_config[current_season] %}
    {% set base_time = strptime(conf.base_time, '%H:%M').time() %}
    {% set limit_time = strptime(conf.limit, '%H:%M').time() %}
    {{ [sun_rising, base_time.strftime('%H:%M')] | max }}

trigger:
  - platform: time
    at: "{{ target_open_time }}"
  - platform: state
    entity_id: sun.sun
    from: "below_horizon"
    to: "above_horizon"

condition:
  - condition: template
    value_template: >-
      {{ 
        now().strftime('%H:%M') == target_open_time.split(':')[0] ~ ':' ~ target_open_time.split(':')[1]
        or (is_state('sun.sun', 'above_horizon') 
            and (as_timestamp(now()) - as_timestamp(states.sun.sun.last_changed)) < 300)
      }}

action:
  - parallel:
      # Verarbeite Gruppe 1
      - choose:
          - conditions: "{{ input.group1_covers | length > 0 }}"
            sequence:
              - service: cover.open_cover
                target:
                  entity_id: "{{ input.group1_covers }}"
                metadata:
                  batch: true
        default: []
      
      # Verarbeite Gruppe 2
      - choose:
          - conditions: >-
              {{ input.group2_covers | length > 0
                 and is_state(input.group2_disable_switch, 'off')
                 and input.group2_disable_switch not in ['', None] }}
            sequence:
              - service: cover.open_cover
                target:
                  entity_id: "{{ input.group2_covers }}"
                metadata:
                  batch: true
        default: []
      
      # Logging und Benachrichtigungen
      - choose:
          - conditions: "{{ input.enable_logging }}"
            sequence:
              - service: system_log.write
                data:
                  message: >-
                    Rolladensteuerung {{ now_local }}:
                    - Jahreszeit: {{ current_season }}
                    - Sonnenaufgang: {{ last_sunrise | as_local }}
                    - Öffnungszeit: {{ target_open_time }}
                    - Gruppe1: {{ input.group1_covers | length }}
                    - Gruppe2: {{ input.group2_covers | length }}
                  level: info
          
          - conditions: >-
              {{ 
                (input.group1_covers + input.group2_covers) | unique | list | count 
                < (input.group1_covers | length + input.group2_covers | length) 
              }}
            sequence:
              - service: persistent_notification.create
                data:
                  title: "Doppelte Rollläden erkannt"
                  message: >-
                    Konflikt in: {{ 
                      (input.group1_covers + input.group2_covers)
                      | groupby('entity_id')
                      | selectattr('1', 'count>1')
                      | map(attribute='0')
                      | join(', ') 
                    }}
