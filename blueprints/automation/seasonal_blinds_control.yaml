blueprint:
  name: Saisonale Rollladensteuerung (v4.3)
  description: >
    Automatische Steuerung von Rollläden basierend auf Sonnenaufgang und Jahreszeiten.
    Zwei Gruppen, saisonale Öffnungszeiten, Deaktivierungsschalter, Logging und robuste Fehlerbehandlung.
  domain: automation
  source_url: https://raw.githubusercontent.com/jard4101/friendly-octo-guide/main/blueprints/automation/seasonal_blinds_control.yaml
  author: jard4101

  input:
    group1_covers:
      name: Rollläden Gruppe 1
      selector:
        entity:
          domain: cover
          multiple: true
    group2_covers:
      name: Rollläden Gruppe 2
      description: "Nur aktiv wenn Deaktivierungsschalter aus"
      selector:
        entity:
          domain: cover
          multiple: true
    group2_disable_switch:
      name: Deaktivierungsschalter
      selector:
        entity:
          domain: input_boolean
    spring_start:
      name: Frühlingsbeginn (TT-MM)
      default: "20-03"
      selector:
        text: {}
    summer_start:
      name: Sommerbeginn (TT-MM)
      default: "21-06"
      selector:
        text: {}
    autumn_start:
      name: Herbstbeginn (TT-MM)
      default: "23-09"
      selector:
        text: {}
    winter_open_time:
      name: Winter-Öffnungszeit
      default: "07:00"
      selector:
        time: {}
    spring_open_time:
      name: Frühling-Öffnungszeit
      default: "06:30"
      selector:
        time: {}
    summer_open_time:
      name: Sommer-Öffnungszeit
      default: "06:00"
      selector:
        time: {}
    enable_logging:
      name: Logging aktivieren
      default: false
      selector:
        boolean: {}

variables:
  # Datumseingaben validieren (TT-MM)
  validated_dates: >-
    {% set validate = lambda d, default: d if d|regex_match('^(0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[0-2])$') else default %}
    {
      "spring": validate(input.spring_start, '20-03'),
      "summer": validate(input.summer_start, '21-06'),
      "autumn": validate(input.autumn_start, '23-09')
    }

  # Jahreszeitenlogik
  current_season: >-
    {% set now_day = now().day %}
    {% set now_month = now().month %}
    {% set spring_day = validated_dates.spring[0:2]|int %}
    {% set spring_month = validated_dates.spring[3:5]|int %}
    {% set summer_day = validated_dates.summer[0:2]|int %}
    {% set summer_month = validated_dates.summer[3:5]|int %}
    {% set autumn_day = validated_dates.autumn[0:2]|int %}
    {% set autumn_month = validated_dates.autumn[3:5]|int %}
    {% if (now_month > spring_month or (now_month == spring_month and now_day >= spring_day))
          and (now_month < summer_month or (now_month == summer_month and now_day < summer_day)) %}
      spring
    {% elif (now_month > summer_month or (now_month == summer_month and now_day >= summer_day))
            and (now_month < autumn_month or (now_month == autumn_month and now_day < autumn_day)) %}
      summer
    {% else %}
      winter
    {% endif %}

  # Sonnenaufgang (Fallback 07:00 Uhr)
  sunrise_time: >-
    {% set rising = state_attr('sun.sun', 'next_rising') %}
    {% if rising %}
      {{ as_local(rising).strftime('%H:%M') }}
    {% else %}
      07:00
    {% endif %}

  # Öffnungszeit je nach Saison
  season_open_time: >-
    {% if current_season == 'spring' %}
      {{ input.spring_open_time }}
    {% elif current_season == 'summer' %}
      {{ input.summer_open_time }}
    {% else %}
      {{ input.winter_open_time }}
    {% endif %}

  # Tatsächliche Öffnungszeit (späterer Wert von Sonnenaufgang oder Saisonzeit)
  actual_open_time: >-
    {{ [sunrise_time, season_open_time]|max }}

  # Doppelte Covers herausfiltern
  duplicate_covers: >-
    {{ (input.group1_covers|select('in', input.group2_covers)|list) if input.group2_covers else [] }}

  final_group1_covers: >-
    {{ input.group1_covers|reject('in', duplicate_covers)|list }}
  final_group2_covers: >-
    {{ input.group2_covers|reject('in', duplicate_covers)|list }}

  group2_enabled: >-
    {% if input.group2_disable_switch %}
      {{ not is_state(input.group2_disable_switch, 'on') }}
    {% else %}
      true
    {% endif %}

  log_info: >-
    Saisonale Rollladensteuerung:
    Datum: {{ now().strftime('%d.%m.%Y') }}
    Zeit: {{ now().strftime('%H:%M:%S') }}
    Jahreszeit: {{ current_season }}
    Sonnenaufgang: {{ sunrise_time }}
    Konfigurierte Öffnungszeit: {{ season_open_time }}
    Tatsächliche Öffnungszeit: {{ actual_open_time }}
    Gruppe 1 Rollläden: {{ final_group1_covers | length }}
    Gruppe 2 Rollläden: {{ final_group2_covers | length }}
    Gruppe 2 aktiviert: {{ group2_enabled }}
    Doppelte Rollläden: {{ duplicate_covers | length }}

trigger:
  - platform: time
    at: "{{ actual_open_time }}"
  - platform: state
    entity_id: sun.sun
    from: "below_horizon"
    to: "above_horizon"

condition: []

action:
  # Logging, wenn aktiviert
  - if:
      - condition: template
        value_template: "{{ input.enable_logging }}"
    then:
      - service: system_log.write
        data:
          message: "{{ log_info }}"
          level: info

  # Warnung bei doppelten Covers
  - if:
      - condition: template
        value_template: "{{ duplicate_covers | length > 0 }}"
    then:
      - service: persistent_notification.create
        data:
          title: "Warnung: Doppelte Rollläden"
          message: "Die folgenden Rollläden wurden in beiden Gruppen gefunden und werden nur in Gruppe 1 verwendet: {{ duplicate_covers | join(', ') }}"

  # Öffne Gruppe 1
  - if:
      - condition: template
        value_template: "{{ final_group1_covers | length > 0 }}"
    then:
      - service: cover.open_cover
        target:
          entity_id: "{{ final_group1_covers }}"

  # Öffne Gruppe 2, wenn aktiviert
  - if:
      - condition: template
        value_template: "{{ final_group2_covers | length > 0 and group2_enabled }}"
    then:
      - service: cover.open_cover
        target:
          entity_id: "{{ final_group2_covers }}"
