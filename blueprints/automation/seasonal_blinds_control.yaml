blueprint:
  name: Saisonale Rollladensteuerung (v4.1)
  description: "Automatische Steuerung mit validierten Eingaben und modernen Selektoren"
  domain: automation
  source_url: https://raw.githubusercontent.com/jard4101/friendly-octo-guide/main/blueprints/automation/seasonal_blinds_control.yaml
  author: jard4101

  input:
    group1_covers:
      name: Rollläden Gruppe 1
      selector:
        entity:
          domain: cover
          multiple: true
          required: true
    group2_covers:
      name: Rollläden Gruppe 2
      description: "Nur aktiv wenn Deaktivierungsschalter aus"
      selector:
        entity:
          domain: cover
          multiple: true
    group2_disable_switch:
      name: Deaktivierungsschalter
      selector:
        entity:
          domain: input_boolean
    spring_start:
      name: Frühlingsbeginn (TT-MM)
      default: "20-03"
      selector:
        text: {}
    summer_start:
      name: Sommerbeginn (TT-MM)
      default: "21-06"
      selector:
        text: {}
    autumn_start:
      name: Herbstbeginn (TT-MM)
      default: "23-09"
      selector:
        text: {}
    winter_open_time:
      name: Winter-Öffnungszeit
      default: "07:00"
      selector:
        time: {}
    spring_open_time:
      name: Frühling-Öffnungszeit
      default: "06:30"
      selector:
        time: {}
    summer_open_time:
      name: Sommer-Öffnungszeit
      default: "06:00"
      selector:
        time: {}
    enable_logging:
      name: Logging aktivieren
      default: false
      selector:
        boolean: {}

variables:
  # Eingabevalidierung
  validated_dates: >-
    {% set validate = lambda d: d if d|regex_match('^(0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[0-2])$') else default %}
    {
      "spring": "{{ validate(input.spring_start, '20-03') }}",
      "summer": "{{ validate(input.summer_start, '21-06') }}",
      "autumn": "{{ validate(input.autumn_start, '23-09') }}"
    }

  # Jahreszeitenberechnung
  current_season: >-
    {% set now_date = now().strftime('%m-%d') %}
    {% if now_date >= validated_dates.spring and now_date < validated_dates.summer %}spring
    {% elif now_date >= validated_dates.summer and now_date < validated_dates.autumn %}summer
    {% else %}winter{% endif %}

  # Sonnenaufgang mit UTC-Handling
  sunrise_time: >-
    {% set rising = state_attr('sun.sun', 'next_rising') %}
    {{ as_local(rising) if rising else now().replace(hour=7) }}

  # Öffnungszeitberechnung
  target_open_time: >-
    {% set season_config = {
      'spring': {'time': input.spring_open_time, 'limit': '06:30'},
      'summer': {'time': input.summer_open_time, 'limit': '06:00'},
      'winter': {'time': input.winter_open_time, 'limit': '07:00'}
    } %}
    {% set conf = season_config[current_season] %}
    {% set sunrise = sunrise_time.strftime('%H:%M') %}
    {% set open_time = strptime(conf.time, '%H:%M').strftime('%H:%M') %}
    {{ [sunrise, open_time]|max }}

action:
  - repeat:
      for_each: "{{ (group1_covers + group2_covers)|unique|list }}"
      sequence:
        - service: cover.open_cover
          target:
            entity_id: "{{ item }}"
          enabled: >-
            {% if item in group1_covers %}
              true
            {% elif item in group2_covers %}
              {{ not is_state(group2_disable_switch, 'on') }}
            {% endif %}
