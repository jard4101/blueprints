blueprint:
  name: Saisonale Rollladensteuerung (v2.1)
  description: "Optimierte Version mit Jahreszeitenlogik und Fehlerresilienz"
  domain: automation
  source_url: https://github.com/jard4101/friendly-octo-guide
  author: jard4101
  input:
    group1_covers:
      name: Rollläden Gruppe 1
      selector:
        entity:
          domain: cover
          multiple: true
    group2_covers:
      name: Rollläden Gruppe 2
      description: "Nur aktiv wenn Deaktivierungsschalter aus"
      default: []
      selector:
        entity:
          domain: cover
          multiple: true
    group2_disable_switch:
      name: Deaktivierungsschalter
      selector:
        entity:
          domain: input_boolean
    spring_start:
      name: Frühlingsbeginn
      default: "03-20"
      selector:
        text:
          type: date
    summer_start:
      name: Sommerbeginn
      default: "06-21"
      selector:
        text:
          type: date
    autumn_start:
      name: Herbstbeginn
      default: "09-23"
      selector:
        text:
          type: date
    winter_open_time:
      name: Winter-Öffnungszeit
      default: "07:00"
      selector:
        time: {}
    spring_open_time:
      name: Frühling-Öffnungszeit
      default: "06:30"
      selector:
        time: {}
    summer_open_time:
      name: Sommer-Öffnungszeit
      default: "06:00"
      selector:
        time: {}
    enable_logging:
      name: Logging aktivieren
      description: Aktiviert detailliertes Logging für Fehlersuche
      default: false
      selector:
        boolean: {}

mode: single
max_exceeded: silent

variables:
  # Eingaben in Variablen konvertieren
  group1_covers: !input group1_covers
  group2_covers: !input group2_covers
  group2_disable_switch: !input group2_disable_switch
  spring_start: !input spring_start
  summer_start: !input summer_start
  autumn_start: !input autumn_start
  winter_open_time: !input winter_open_time
  spring_open_time: !input spring_open_time
  summer_open_time: !input summer_open_time
  enable_logging: !input enable_logging
  
  # Aktuelle Datum und Zeit
  now_ts: "{{ as_timestamp(now()) }}"
  now_date: "{{ now().strftime('%d-%m') }}"
  now_time: "{{ now().strftime('%H:%M:%S') }}"
  
  # Validierung und Konvertierung der Datumsformate
  valid_spring_date: >-
    {% set date_pattern = '^([0-9]{2})-([0-9]{2})$' %}
    {% if spring_start is string and spring_start | regex_match(date_pattern) %}
      {{ spring_start }}
    {% else %}
      {{ '20-03' }}
    {% endif %}
  
  valid_summer_date: >-
    {% set date_pattern = '^([0-9]{2})-([0-9]{2})$' %}
    {% if summer_start is string and summer_start | regex_match(date_pattern) %}
      {{ summer_start }}
    {% else %}
      {{ '21-06' }}
    {% endif %}
  
  valid_autumn_date: >-
    {% set date_pattern = '^([0-9]{2})-([0-9]{2})$' %}
    {% if autumn_start is string and autumn_start | regex_match(date_pattern) %}
      {{ autumn_start }}
    {% else %}
      {{ '23-09' }}
    {% endif %}
  
  # Aktuelle Jahreszeit bestimmen
  current_season: >-
    {% set year = now().year %}
    {% set spring_day = valid_spring_date.split('-')[0] | int %}
    {% set spring_month = valid_spring_date.split('-')[1] | int %}
    {% set spring_date = strptime(year ~ '-' ~ valid_spring_date.split('-')[1] ~ '-' ~ valid_spring_date.split('-')[0], '%Y-%m-%d') %}
    
    {% set summer_day = valid_summer_date.split('-')[0] | int %}
    {% set summer_month = valid_summer_date.split('-')[1] | int %}
    {% set summer_date = strptime(year ~ '-' ~ valid_summer_date.split('-')[1] ~ '-' ~ valid_summer_date.split('-')[0], '%Y-%m-%d') %}
    
    {% set autumn_day = valid_autumn_date.split('-')[0] | int %}
    {% set autumn_month = valid_autumn_date.split('-')[1] | int %}
    {% set autumn_date = strptime(year ~ '-' ~ valid_autumn_date.split('-')[1] ~ '-' ~ valid_autumn_date.split('-')[0], '%Y-%m-%d') %}
    
    {% set current_date = now() %}
    
    {% if spring_date <= current_date < summer_date %}
      {{ 'spring' }}
    {% elif summer_date <= current_date < autumn_date %}
      {{ 'summer' }}
    {% else %}
      {{ 'winter' }}
    {% endif %}
  
  # Sonnenaufgangszeit mit Fehlerbehandlung
  sunrise_time: >-
    {% set rising = states('sensor.sun_next_rising') %}
    {% if rising != 'unknown' and rising != 'unavailable' %}
      {{ as_timestamp(rising) | timestamp_custom('%H:%M:%S', true) }}
    {% else %}
      {{ '07:00:00' }}
    {% endif %}
  
  # Öffnungszeit basierend auf Jahreszeit
  season_open_time: >-
    {% if current_season == 'spring' %}
      {{ spring_open_time }}
    {% elif current_season == 'summer' %}
      {{ summer_open_time }}
    {% else %}
      {{ winter_open_time }}
    {% endif %}
  
  # Bestimme die tatsächliche Öffnungszeit
  actual_open_time: >-
    {% if current_season == 'winter' %}
      {% if sunrise_time < winter_open_time %}
        {{ winter_open_time }}
      {% else %}
        {{ sunrise_time }}
      {% endif %}
    {% elif current_season == 'spring' %}
      {% if sunrise_time < spring_open_time %}
        {{ spring_open_time }}
      {% else %}
        {{ sunrise_time }}
      {% endif %}
    {% elif current_season == 'summer' %}
      {% if sunrise_time < summer_open_time %}
        {{ summer_open_time }}
      {% else %}
        {{ sunrise_time }}
      {% endif %}
    {% else %}
      {{ sunrise_time }}
    {% endif %}
  
  # Überprüfe, ob Rollläden in beiden Gruppen vorkommen
  duplicate_covers: >-
    {% set group1_set = group1_covers | map('lower') | list %}
    {% set group2_set = group2_covers | map('lower') | list %}
    {% set duplicates = [] %}
    {% for cover in group1_set %}
      {% if cover in group2_set %}
        {% set duplicates = duplicates + [cover] %}
      {% endif %}
    {% endfor %}
    {{ duplicates }}
  
  # Bereite die finalen Rollladen-Listen vor
  final_group1_covers: >-
    {% if duplicate_covers | length > 0 %}
      {% set filtered = [] %}
      {% for cover in group1_covers %}
        {% if cover | lower not in duplicate_covers | map('lower') | list %}
          {% set filtered = filtered + [cover] %}
        {% endif %}
      {% endfor %}
      {{ filtered }}
    {% else %}
      {{ group1_covers }}
    {% endif %}
  
  final_group2_covers: >-
    {% if duplicate_covers | length > 0 %}
      {% set filtered = [] %}
      {% for cover in group2_covers %}
        {% if cover | lower not in duplicate_covers | map('lower') | list %}
          {% set filtered = filtered + [cover] %}
        {% endif %}
      {% endfor %}
      {{ filtered }}
    {% else %}
      {{ group2_covers }}
    {% endif %}
  
  # Prüfe, ob Gruppe 2 aktiviert ist
  group2_enabled: >-
    {% if group2_disable_switch | length > 0 %}
      {{ not is_state(group2_disable_switch, 'on') }}
    {% else %}
      {{ true }}
    {% endif %}
  
  # Logging-Informationen
  log_info: >-
    Saisonale Rollladensteuerung:
    Datum: {{ now().strftime('%d.%m.%Y') }}
    Zeit: {{ now().strftime('%H:%M:%S') }}
    Jahreszeit: {{ current_season }}
    Sonnenaufgang: {{ sunrise_time }}
    Konfigurierte Öffnungszeit: {{ season_open_time }}
    Tatsächliche Öffnungszeit: {{ actual_open_time }}
    Gruppe 1 Rollläden: {{ final_group1_covers | length }}
    Gruppe 2 Rollläden: {{ final_group2_covers | length }}
    Gruppe 2 aktiviert: {{ group2_enabled }}
    Doppelte Rollläden: {{ duplicate_covers | length }}

trigger:
  - platform: time
    at: "{{ actual_open_time[0:5] }}"
  - platform: homeassistant
    event: start
  - platform: state
    entity_id: sun.sun
    from: 'below_horizon'
    to: 'above_horizon'

condition:
  # Prüfen, ob die aktuelle Zeit der berechneten Öffnungszeit entspricht oder ob die Sonne gerade aufgegangen ist
  - condition: or
    conditions:
      - condition: template
        value_template: "{{ now().strftime('%H:%M') == actual_open_time[0:5] }}"
      - condition: and
        conditions:
          - condition: state
            entity_id: sun.sun
            state: 'above_horizon'
          - condition: template
            value_template: "{{ (as_timestamp(now()) - as_timestamp(states.sun.sun.last_changed)) < 300 }}"

action:
  # Logging, wenn aktiviert
  - if:
      condition: template
      value_template: "{{ enable_logging }}"
    then:
      - service: system_log.write
        data:
          message: "{{ log_info }}"
          level: info

  # Warnung, wenn Rollläden in beiden Gruppen vorkommen
  - if:
      condition: template
      value_template: "{{ duplicate_covers | length > 0 }}"
    then:
      - service: persistent_notification.create
        data:
          title: "Warnung: Doppelte Rollläden"
          message: "Die folgenden Rollläden wurden in beiden Gruppen gefunden und werden nur in Gruppe 1 verwendet: {{ duplicate_covers | join(', ') }}"

  # Öffne Rollläden der Gruppe 1
  - if:
      condition: template
      value_template: "{{ final_group1_covers | length > 0 }}"
    then:
      - service: cover.open_cover
        target:
          entity_id: "{{ final_group1_covers }}"
        data: {}

  # Öffne Rollläden der Gruppe 2, wenn aktiviert
  - if:
      condition: and
      conditions:
        - condition: template
          value_template: "{{ final_group2_covers | length > 0 }}"
        - condition: template
          value_template: "{{ group2_enabled }}"
    then:
      - service: cover.open_cover
        target:
          entity_id: "{{ final_group2_covers }}"
        data: {}
